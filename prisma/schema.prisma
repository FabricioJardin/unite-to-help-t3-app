// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String           @id @default(uuid())
    name              String
    email             String           @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    profile           Profile?
    groups            UsersOnGroups[]
    events            Event[]
    eventsAsVolunteer EventVolunteer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Custom models
model Profile {
    userId   String    @id @unique
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    dob      DateTime
    gender   String
    country  String
    zipCode  String
    contacts Contact[]
}

model Cause {
    id     String  @id @default(uuid())
    name   String
    groups Group[]
    events Event[]
}

model Group {
    id          String          @id @default(uuid())
    name        String
    description String
    country     String
    zipCode     String
    causes      Cause[]
    users       UsersOnGroups[]
    contacts    Contact[]
    events      Event[]
}

model UsersOnGroups {
    user     User     @relation(fields: [userId], references: [id])
    userId   String
    group    Group    @relation(fields: [groupId], references: [id])
    groupId  String
    joinedAt DateTime @default(now())
    role     String   @default("USER")

    @@id([groupId, userId])
}

model Contact {
    id       String    @id @default(uuid())
    type     String
    value    String
    events   Event[]
    groups   Group[]
    profiles Profile[]
}

model EventVolunteer {
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    event   Event  @relation(fields: [eventId], references: [id])
    eventId String
    status  String @default("REQUESTED") // REQUESTED, APPROVED, REFUSED

    @@unique([userId, eventId])
}

// Essa model não precisa do country pois já possui no grupo, então o country será o mesmo do group
model Event {
    id          String           @id @default(uuid())
    name        String
    description String
    cause       Cause            @relation(fields: [causeId], references: [id], onDelete: Restrict)
    causeId     String
    group       Group            @relation(fields: [groupId], references: [id], onDelete: Restrict)
    groupId     String
    zipCode     String // Para saber a localização do evento, pode não ser na mesma localização do grupo
    creator     User             @relation(fields: [creatorId], references: [id])
    creatorId   String
    contacts    Contact[]
    volunteers  EventVolunteer[]
}
